"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import ssl_gc_game_event_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _MatchType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _MatchTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MatchType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    UNKNOWN_MATCH: MatchType.ValueType = ...  # 0
    """not set"""

    GROUP_PHASE: MatchType.ValueType = ...  # 1
    """match is part of the group phase"""

    ELIMINATION_PHASE: MatchType.ValueType = ...  # 2
    """match is part of the elimination phase"""

    FRIENDLY: MatchType.ValueType = ...  # 3
    """a friendly match, not part of a tournament"""

class MatchType(_MatchType, metaclass=_MatchTypeEnumTypeWrapper):
    """MatchType is a meta information about the current match for easier log processing"""
    pass

UNKNOWN_MATCH: MatchType.ValueType = ...  # 0
"""not set"""

GROUP_PHASE: MatchType.ValueType = ...  # 1
"""match is part of the group phase"""

ELIMINATION_PHASE: MatchType.ValueType = ...  # 2
"""match is part of the elimination phase"""

FRIENDLY: MatchType.ValueType = ...  # 3
"""a friendly match, not part of a tournament"""

global___MatchType = MatchType


class Referee(google.protobuf.message.Message):
    """Each UDP packet contains one of these messages."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Stage:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StageEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Stage.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        NORMAL_FIRST_HALF_PRE: Referee.Stage.ValueType = ...  # 0
        """The first half is about to start.
        A kickoff is called within this stage.
        This stage ends with the NORMAL_START.
        """

        NORMAL_FIRST_HALF: Referee.Stage.ValueType = ...  # 1
        """The first half of the normal game, before half time."""

        NORMAL_HALF_TIME: Referee.Stage.ValueType = ...  # 2
        """Half time between first and second halves."""

        NORMAL_SECOND_HALF_PRE: Referee.Stage.ValueType = ...  # 3
        """The second half is about to start.
        A kickoff is called within this stage.
        This stage ends with the NORMAL_START.
        """

        NORMAL_SECOND_HALF: Referee.Stage.ValueType = ...  # 4
        """The second half of the normal game, after half time."""

        EXTRA_TIME_BREAK: Referee.Stage.ValueType = ...  # 5
        """The break before extra time."""

        EXTRA_FIRST_HALF_PRE: Referee.Stage.ValueType = ...  # 6
        """The first half of extra time is about to start.
        A kickoff is called within this stage.
        This stage ends with the NORMAL_START.
        """

        EXTRA_FIRST_HALF: Referee.Stage.ValueType = ...  # 7
        """The first half of extra time."""

        EXTRA_HALF_TIME: Referee.Stage.ValueType = ...  # 8
        """Half time between first and second extra halves."""

        EXTRA_SECOND_HALF_PRE: Referee.Stage.ValueType = ...  # 9
        """The second half of extra time is about to start.
        A kickoff is called within this stage.
        This stage ends with the NORMAL_START.
        """

        EXTRA_SECOND_HALF: Referee.Stage.ValueType = ...  # 10
        """The second half of extra time."""

        PENALTY_SHOOTOUT_BREAK: Referee.Stage.ValueType = ...  # 11
        """The break before penalty shootout."""

        PENALTY_SHOOTOUT: Referee.Stage.ValueType = ...  # 12
        """The penalty shootout."""

        POST_GAME: Referee.Stage.ValueType = ...  # 13
        """The game is over."""

    class Stage(_Stage, metaclass=_StageEnumTypeWrapper):
        """These are the "coarse" stages of the game."""
        pass

    NORMAL_FIRST_HALF_PRE: Referee.Stage.ValueType = ...  # 0
    """The first half is about to start.
    A kickoff is called within this stage.
    This stage ends with the NORMAL_START.
    """

    NORMAL_FIRST_HALF: Referee.Stage.ValueType = ...  # 1
    """The first half of the normal game, before half time."""

    NORMAL_HALF_TIME: Referee.Stage.ValueType = ...  # 2
    """Half time between first and second halves."""

    NORMAL_SECOND_HALF_PRE: Referee.Stage.ValueType = ...  # 3
    """The second half is about to start.
    A kickoff is called within this stage.
    This stage ends with the NORMAL_START.
    """

    NORMAL_SECOND_HALF: Referee.Stage.ValueType = ...  # 4
    """The second half of the normal game, after half time."""

    EXTRA_TIME_BREAK: Referee.Stage.ValueType = ...  # 5
    """The break before extra time."""

    EXTRA_FIRST_HALF_PRE: Referee.Stage.ValueType = ...  # 6
    """The first half of extra time is about to start.
    A kickoff is called within this stage.
    This stage ends with the NORMAL_START.
    """

    EXTRA_FIRST_HALF: Referee.Stage.ValueType = ...  # 7
    """The first half of extra time."""

    EXTRA_HALF_TIME: Referee.Stage.ValueType = ...  # 8
    """Half time between first and second extra halves."""

    EXTRA_SECOND_HALF_PRE: Referee.Stage.ValueType = ...  # 9
    """The second half of extra time is about to start.
    A kickoff is called within this stage.
    This stage ends with the NORMAL_START.
    """

    EXTRA_SECOND_HALF: Referee.Stage.ValueType = ...  # 10
    """The second half of extra time."""

    PENALTY_SHOOTOUT_BREAK: Referee.Stage.ValueType = ...  # 11
    """The break before penalty shootout."""

    PENALTY_SHOOTOUT: Referee.Stage.ValueType = ...  # 12
    """The penalty shootout."""

    POST_GAME: Referee.Stage.ValueType = ...  # 13
    """The game is over."""


    class _Command:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _CommandEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Command.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        HALT: Referee.Command.ValueType = ...  # 0
        """All robots should completely stop moving."""

        STOP: Referee.Command.ValueType = ...  # 1
        """Robots must keep 50 cm from the ball."""

        NORMAL_START: Referee.Command.ValueType = ...  # 2
        """A prepared kickoff or penalty may now be taken."""

        FORCE_START: Referee.Command.ValueType = ...  # 3
        """The ball is dropped and free for either team."""

        PREPARE_KICKOFF_YELLOW: Referee.Command.ValueType = ...  # 4
        """The yellow team may move into kickoff position."""

        PREPARE_KICKOFF_BLUE: Referee.Command.ValueType = ...  # 5
        """The blue team may move into kickoff position."""

        PREPARE_PENALTY_YELLOW: Referee.Command.ValueType = ...  # 6
        """The yellow team may move into penalty position."""

        PREPARE_PENALTY_BLUE: Referee.Command.ValueType = ...  # 7
        """The blue team may move into penalty position."""

        DIRECT_FREE_YELLOW: Referee.Command.ValueType = ...  # 8
        """The yellow team may take a direct free kick."""

        DIRECT_FREE_BLUE: Referee.Command.ValueType = ...  # 9
        """The blue team may take a direct free kick."""

        INDIRECT_FREE_YELLOW: Referee.Command.ValueType = ...  # 10
        """The yellow team may take an indirect free kick."""

        INDIRECT_FREE_BLUE: Referee.Command.ValueType = ...  # 11
        """The blue team may take an indirect free kick."""

        TIMEOUT_YELLOW: Referee.Command.ValueType = ...  # 12
        """The yellow team is currently in a timeout."""

        TIMEOUT_BLUE: Referee.Command.ValueType = ...  # 13
        """The blue team is currently in a timeout."""

        GOAL_YELLOW: Referee.Command.ValueType = ...  # 14
        """The yellow team just scored a goal.
        For information only.
        For rules compliance, teams must treat as STOP.
        Deprecated: Use the score field from the team infos instead. That way, you can also detect revoked goals.
        """

        GOAL_BLUE: Referee.Command.ValueType = ...  # 15
        """The blue team just scored a goal. See also GOAL_YELLOW."""

        BALL_PLACEMENT_YELLOW: Referee.Command.ValueType = ...  # 16
        """Equivalent to STOP, but the yellow team must pick up the ball and
        drop it in the Designated Position.
        """

        BALL_PLACEMENT_BLUE: Referee.Command.ValueType = ...  # 17
        """Equivalent to STOP, but the blue team must pick up the ball and drop
        it in the Designated Position.
        """

    class Command(_Command, metaclass=_CommandEnumTypeWrapper):
        """These are the "fine" states of play on the field."""
        pass

    HALT: Referee.Command.ValueType = ...  # 0
    """All robots should completely stop moving."""

    STOP: Referee.Command.ValueType = ...  # 1
    """Robots must keep 50 cm from the ball."""

    NORMAL_START: Referee.Command.ValueType = ...  # 2
    """A prepared kickoff or penalty may now be taken."""

    FORCE_START: Referee.Command.ValueType = ...  # 3
    """The ball is dropped and free for either team."""

    PREPARE_KICKOFF_YELLOW: Referee.Command.ValueType = ...  # 4
    """The yellow team may move into kickoff position."""

    PREPARE_KICKOFF_BLUE: Referee.Command.ValueType = ...  # 5
    """The blue team may move into kickoff position."""

    PREPARE_PENALTY_YELLOW: Referee.Command.ValueType = ...  # 6
    """The yellow team may move into penalty position."""

    PREPARE_PENALTY_BLUE: Referee.Command.ValueType = ...  # 7
    """The blue team may move into penalty position."""

    DIRECT_FREE_YELLOW: Referee.Command.ValueType = ...  # 8
    """The yellow team may take a direct free kick."""

    DIRECT_FREE_BLUE: Referee.Command.ValueType = ...  # 9
    """The blue team may take a direct free kick."""

    INDIRECT_FREE_YELLOW: Referee.Command.ValueType = ...  # 10
    """The yellow team may take an indirect free kick."""

    INDIRECT_FREE_BLUE: Referee.Command.ValueType = ...  # 11
    """The blue team may take an indirect free kick."""

    TIMEOUT_YELLOW: Referee.Command.ValueType = ...  # 12
    """The yellow team is currently in a timeout."""

    TIMEOUT_BLUE: Referee.Command.ValueType = ...  # 13
    """The blue team is currently in a timeout."""

    GOAL_YELLOW: Referee.Command.ValueType = ...  # 14
    """The yellow team just scored a goal.
    For information only.
    For rules compliance, teams must treat as STOP.
    Deprecated: Use the score field from the team infos instead. That way, you can also detect revoked goals.
    """

    GOAL_BLUE: Referee.Command.ValueType = ...  # 15
    """The blue team just scored a goal. See also GOAL_YELLOW."""

    BALL_PLACEMENT_YELLOW: Referee.Command.ValueType = ...  # 16
    """Equivalent to STOP, but the yellow team must pick up the ball and
    drop it in the Designated Position.
    """

    BALL_PLACEMENT_BLUE: Referee.Command.ValueType = ...  # 17
    """Equivalent to STOP, but the blue team must pick up the ball and drop
    it in the Designated Position.
    """


    class TeamInfo(google.protobuf.message.Message):
        """Information about a single team."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        NAME_FIELD_NUMBER: builtins.int
        SCORE_FIELD_NUMBER: builtins.int
        RED_CARDS_FIELD_NUMBER: builtins.int
        YELLOW_CARD_TIMES_FIELD_NUMBER: builtins.int
        YELLOW_CARDS_FIELD_NUMBER: builtins.int
        TIMEOUTS_FIELD_NUMBER: builtins.int
        TIMEOUT_TIME_FIELD_NUMBER: builtins.int
        GOALKEEPER_FIELD_NUMBER: builtins.int
        FOUL_COUNTER_FIELD_NUMBER: builtins.int
        BALL_PLACEMENT_FAILURES_FIELD_NUMBER: builtins.int
        CAN_PLACE_BALL_FIELD_NUMBER: builtins.int
        MAX_ALLOWED_BOTS_FIELD_NUMBER: builtins.int
        BOT_SUBSTITUTION_INTENT_FIELD_NUMBER: builtins.int
        BALL_PLACEMENT_FAILURES_REACHED_FIELD_NUMBER: builtins.int
        name: typing.Text = ...
        """The team's name (empty string if operator has not typed anything)."""

        score: builtins.int = ...
        """The number of goals scored by the team during normal play and overtime."""

        red_cards: builtins.int = ...
        """The number of red cards issued to the team since the beginning of the game."""

        @property
        def yellow_card_times(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """The amount of time (in microseconds) left on each yellow card issued to the team.
            If no yellow cards are issued, this array has no elements.
            Otherwise, times are ordered from smallest to largest.
            """
            pass
        yellow_cards: builtins.int = ...
        """The total number of yellow cards ever issued to the team."""

        timeouts: builtins.int = ...
        """The number of timeouts this team can still call.
        If in a timeout right now, that timeout is excluded.
        """

        timeout_time: builtins.int = ...
        """The number of microseconds of timeout this team can use."""

        goalkeeper: builtins.int = ...
        """The pattern number of this team's goalkeeper."""

        foul_counter: builtins.int = ...
        """The total number of countable fouls that act towards yellow cards"""

        ball_placement_failures: builtins.int = ...
        """The number of consecutive ball placement failures of this team"""

        can_place_ball: builtins.bool = ...
        """Indicate if the team is able and allowed to place the ball"""

        max_allowed_bots: builtins.int = ...
        """The maximum number of bots allowed on the field based on division and cards"""

        bot_substitution_intent: builtins.bool = ...
        """The team has submitted an intent to substitute one or more robots at the next chance"""

        ball_placement_failures_reached: builtins.bool = ...
        """Indicate if the team reached the maximum allowed ball placement failures and is thus not allowed to place the ball anymore"""

        def __init__(self,
            *,
            name : typing.Optional[typing.Text] = ...,
            score : typing.Optional[builtins.int] = ...,
            red_cards : typing.Optional[builtins.int] = ...,
            yellow_card_times : typing.Optional[typing.Iterable[builtins.int]] = ...,
            yellow_cards : typing.Optional[builtins.int] = ...,
            timeouts : typing.Optional[builtins.int] = ...,
            timeout_time : typing.Optional[builtins.int] = ...,
            goalkeeper : typing.Optional[builtins.int] = ...,
            foul_counter : typing.Optional[builtins.int] = ...,
            ball_placement_failures : typing.Optional[builtins.int] = ...,
            can_place_ball : typing.Optional[builtins.bool] = ...,
            max_allowed_bots : typing.Optional[builtins.int] = ...,
            bot_substitution_intent : typing.Optional[builtins.bool] = ...,
            ball_placement_failures_reached : typing.Optional[builtins.bool] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["ball_placement_failures",b"ball_placement_failures","ball_placement_failures_reached",b"ball_placement_failures_reached","bot_substitution_intent",b"bot_substitution_intent","can_place_ball",b"can_place_ball","foul_counter",b"foul_counter","goalkeeper",b"goalkeeper","max_allowed_bots",b"max_allowed_bots","name",b"name","red_cards",b"red_cards","score",b"score","timeout_time",b"timeout_time","timeouts",b"timeouts","yellow_cards",b"yellow_cards"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["ball_placement_failures",b"ball_placement_failures","ball_placement_failures_reached",b"ball_placement_failures_reached","bot_substitution_intent",b"bot_substitution_intent","can_place_ball",b"can_place_ball","foul_counter",b"foul_counter","goalkeeper",b"goalkeeper","max_allowed_bots",b"max_allowed_bots","name",b"name","red_cards",b"red_cards","score",b"score","timeout_time",b"timeout_time","timeouts",b"timeouts","yellow_card_times",b"yellow_card_times","yellow_cards",b"yellow_cards"]) -> None: ...

    class Point(google.protobuf.message.Message):
        """The coordinates of the Designated Position. These are measured in
        millimetres and correspond to SSL-Vision coordinates. These fields are
        always either both present (in the case of a ball placement command) or
        both absent (in the case of any other command).
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        X_FIELD_NUMBER: builtins.int
        Y_FIELD_NUMBER: builtins.int
        x: builtins.float = ...
        y: builtins.float = ...
        def __init__(self,
            *,
            x : typing.Optional[builtins.float] = ...,
            y : typing.Optional[builtins.float] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y"]) -> None: ...

    SOURCE_IDENTIFIER_FIELD_NUMBER: builtins.int
    MATCH_TYPE_FIELD_NUMBER: builtins.int
    PACKET_TIMESTAMP_FIELD_NUMBER: builtins.int
    STAGE_FIELD_NUMBER: builtins.int
    STAGE_TIME_LEFT_FIELD_NUMBER: builtins.int
    COMMAND_FIELD_NUMBER: builtins.int
    COMMAND_COUNTER_FIELD_NUMBER: builtins.int
    COMMAND_TIMESTAMP_FIELD_NUMBER: builtins.int
    YELLOW_FIELD_NUMBER: builtins.int
    BLUE_FIELD_NUMBER: builtins.int
    DESIGNATED_POSITION_FIELD_NUMBER: builtins.int
    BLUE_TEAM_ON_POSITIVE_HALF_FIELD_NUMBER: builtins.int
    NEXT_COMMAND_FIELD_NUMBER: builtins.int
    GAME_EVENTS_FIELD_NUMBER: builtins.int
    GAME_EVENT_PROPOSALS_FIELD_NUMBER: builtins.int
    CURRENT_ACTION_TIME_REMAINING_FIELD_NUMBER: builtins.int
    source_identifier: typing.Text = ...
    """A random UUID of the source that is kept constant at the source while running
    If multiple sources are broadcasting to the same network, this id can be used to identify individual sources
    """

    match_type: global___MatchType.ValueType = ...
    """The match type is a meta information about the current match that helps to process the logs after a competition"""

    packet_timestamp: builtins.int = ...
    """The UNIX timestamp when the packet was sent, in microseconds.
    Divide by 1,000,000 to get a time_t.
    """

    stage: global___Referee.Stage.ValueType = ...
    stage_time_left: builtins.int = ...
    """The number of microseconds left in the stage.
    The following stages have this value; the rest do not:
    NORMAL_FIRST_HALF
    NORMAL_HALF_TIME
    NORMAL_SECOND_HALF
    EXTRA_TIME_BREAK
    EXTRA_FIRST_HALF
    EXTRA_HALF_TIME
    EXTRA_SECOND_HALF
    PENALTY_SHOOTOUT_BREAK

    If the stage runs over its specified time, this value
    becomes negative.
    """

    command: global___Referee.Command.ValueType = ...
    command_counter: builtins.int = ...
    """The number of commands issued since startup (mod 2^32)."""

    command_timestamp: builtins.int = ...
    """The UNIX timestamp when the command was issued, in microseconds.
    This value changes only when a new command is issued, not on each packet.
    """

    @property
    def yellow(self) -> global___Referee.TeamInfo:
        """Information about the two teams."""
        pass
    @property
    def blue(self) -> global___Referee.TeamInfo: ...
    @property
    def designated_position(self) -> global___Referee.Point: ...
    blue_team_on_positive_half: builtins.bool = ...
    """Information about the direction of play.
    True, if the blue team will have it's goal on the positive x-axis of the ssl-vision coordinate system.
    Obviously, the yellow team will play on the opposite half.
    """

    next_command: global___Referee.Command.ValueType = ...
    """The command that will be issued after the current stoppage and ball placement to continue the game."""

    @property
    def game_events(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ssl_gc_game_event_pb2.GameEvent]: ...
    @property
    def game_event_proposals(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GameEventProposalGroup]: ...
    current_action_time_remaining: builtins.int = ...
    """The time in microseconds that is remaining until the current action times out
    The time will not be reset. It can get negative.
    An autoRef would raise an appropriate event, if the time gets negative.
    Possible actions where this time is relevant:
     * free kicks
     * kickoff, penalty kick, force start
     * ball placement
    """

    def __init__(self,
        *,
        source_identifier : typing.Optional[typing.Text] = ...,
        match_type : typing.Optional[global___MatchType.ValueType] = ...,
        packet_timestamp : typing.Optional[builtins.int] = ...,
        stage : typing.Optional[global___Referee.Stage.ValueType] = ...,
        stage_time_left : typing.Optional[builtins.int] = ...,
        command : typing.Optional[global___Referee.Command.ValueType] = ...,
        command_counter : typing.Optional[builtins.int] = ...,
        command_timestamp : typing.Optional[builtins.int] = ...,
        yellow : typing.Optional[global___Referee.TeamInfo] = ...,
        blue : typing.Optional[global___Referee.TeamInfo] = ...,
        designated_position : typing.Optional[global___Referee.Point] = ...,
        blue_team_on_positive_half : typing.Optional[builtins.bool] = ...,
        next_command : typing.Optional[global___Referee.Command.ValueType] = ...,
        game_events : typing.Optional[typing.Iterable[ssl_gc_game_event_pb2.GameEvent]] = ...,
        game_event_proposals : typing.Optional[typing.Iterable[global___GameEventProposalGroup]] = ...,
        current_action_time_remaining : typing.Optional[builtins.int] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["blue",b"blue","blue_team_on_positive_half",b"blue_team_on_positive_half","command",b"command","command_counter",b"command_counter","command_timestamp",b"command_timestamp","current_action_time_remaining",b"current_action_time_remaining","designated_position",b"designated_position","match_type",b"match_type","next_command",b"next_command","packet_timestamp",b"packet_timestamp","source_identifier",b"source_identifier","stage",b"stage","stage_time_left",b"stage_time_left","yellow",b"yellow"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["blue",b"blue","blue_team_on_positive_half",b"blue_team_on_positive_half","command",b"command","command_counter",b"command_counter","command_timestamp",b"command_timestamp","current_action_time_remaining",b"current_action_time_remaining","designated_position",b"designated_position","game_event_proposals",b"game_event_proposals","game_events",b"game_events","match_type",b"match_type","next_command",b"next_command","packet_timestamp",b"packet_timestamp","source_identifier",b"source_identifier","stage",b"stage","stage_time_left",b"stage_time_left","yellow",b"yellow"]) -> None: ...
global___Referee = Referee

class GameEventProposalGroup(google.protobuf.message.Message):
    """List of matching proposals"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GAME_EVENT_FIELD_NUMBER: builtins.int
    ACCEPTED_FIELD_NUMBER: builtins.int
    @property
    def game_event(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ssl_gc_game_event_pb2.GameEvent]:
        """The proposed game event."""
        pass
    accepted: builtins.bool = ...
    """Whether the proposal group was accepted"""

    def __init__(self,
        *,
        game_event : typing.Optional[typing.Iterable[ssl_gc_game_event_pb2.GameEvent]] = ...,
        accepted : typing.Optional[builtins.bool] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["accepted",b"accepted"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["accepted",b"accepted","game_event",b"game_event"]) -> None: ...
global___GameEventProposalGroup = GameEventProposalGroup
