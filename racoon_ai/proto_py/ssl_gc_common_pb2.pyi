"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _Team:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _TeamEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Team.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    UNKNOWN: Team.ValueType = ...  # 0
    """team not set"""

    YELLOW: Team.ValueType = ...  # 1
    """yellow team"""

    BLUE: Team.ValueType = ...  # 2
    """blue team"""

class Team(_Team, metaclass=_TeamEnumTypeWrapper):
    """Team is either blue or yellow"""
    pass

UNKNOWN: Team.ValueType = ...  # 0
"""team not set"""

YELLOW: Team.ValueType = ...  # 1
"""yellow team"""

BLUE: Team.ValueType = ...  # 2
"""blue team"""

global___Team = Team


class _Division:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _DivisionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Division.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    DIV_UNKNOWN: Division.ValueType = ...  # 0
    DIV_A: Division.ValueType = ...  # 1
    DIV_B: Division.ValueType = ...  # 2
class Division(_Division, metaclass=_DivisionEnumTypeWrapper):
    """Division denotes the current division, which influences some rules"""
    pass

DIV_UNKNOWN: Division.ValueType = ...  # 0
DIV_A: Division.ValueType = ...  # 1
DIV_B: Division.ValueType = ...  # 2
global___Division = Division


class RobotId(google.protobuf.message.Message):
    """RobotId is the combination of a team and a robot id"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ID_FIELD_NUMBER: builtins.int
    TEAM_FIELD_NUMBER: builtins.int
    id: builtins.int = ...
    """the robot number"""

    team: global___Team.ValueType = ...
    """the team that the robot belongs to"""

    def __init__(self,
        *,
        id : typing.Optional[builtins.int] = ...,
        team : typing.Optional[global___Team.ValueType] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["id",b"id","team",b"team"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id","team",b"team"]) -> None: ...
global___RobotId = RobotId
