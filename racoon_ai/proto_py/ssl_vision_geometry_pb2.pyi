"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _SSL_FieldShapeType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _SSL_FieldShapeTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SSL_FieldShapeType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    Undefined: SSL_FieldShapeType.ValueType = ...  # 0
    CenterCircle: SSL_FieldShapeType.ValueType = ...  # 1
    TopTouchLine: SSL_FieldShapeType.ValueType = ...  # 2
    BottomTouchLine: SSL_FieldShapeType.ValueType = ...  # 3
    LeftGoalLine: SSL_FieldShapeType.ValueType = ...  # 4
    RightGoalLine: SSL_FieldShapeType.ValueType = ...  # 5
    HalfwayLine: SSL_FieldShapeType.ValueType = ...  # 6
    CenterLine: SSL_FieldShapeType.ValueType = ...  # 7
    LeftPenaltyStretch: SSL_FieldShapeType.ValueType = ...  # 8
    RightPenaltyStretch: SSL_FieldShapeType.ValueType = ...  # 9
    LeftFieldLeftPenaltyStretch: SSL_FieldShapeType.ValueType = ...  # 10
    LeftFieldRightPenaltyStretch: SSL_FieldShapeType.ValueType = ...  # 11
    RightFieldLeftPenaltyStretch: SSL_FieldShapeType.ValueType = ...  # 12
    RightFieldRightPenaltyStretch: SSL_FieldShapeType.ValueType = ...  # 13
class SSL_FieldShapeType(_SSL_FieldShapeType, metaclass=_SSL_FieldShapeTypeEnumTypeWrapper):
    pass

Undefined: SSL_FieldShapeType.ValueType = ...  # 0
CenterCircle: SSL_FieldShapeType.ValueType = ...  # 1
TopTouchLine: SSL_FieldShapeType.ValueType = ...  # 2
BottomTouchLine: SSL_FieldShapeType.ValueType = ...  # 3
LeftGoalLine: SSL_FieldShapeType.ValueType = ...  # 4
RightGoalLine: SSL_FieldShapeType.ValueType = ...  # 5
HalfwayLine: SSL_FieldShapeType.ValueType = ...  # 6
CenterLine: SSL_FieldShapeType.ValueType = ...  # 7
LeftPenaltyStretch: SSL_FieldShapeType.ValueType = ...  # 8
RightPenaltyStretch: SSL_FieldShapeType.ValueType = ...  # 9
LeftFieldLeftPenaltyStretch: SSL_FieldShapeType.ValueType = ...  # 10
LeftFieldRightPenaltyStretch: SSL_FieldShapeType.ValueType = ...  # 11
RightFieldLeftPenaltyStretch: SSL_FieldShapeType.ValueType = ...  # 12
RightFieldRightPenaltyStretch: SSL_FieldShapeType.ValueType = ...  # 13
global___SSL_FieldShapeType = SSL_FieldShapeType


class Vector2f(google.protobuf.message.Message):
    """A 2D float vector."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    x: builtins.float = ...
    """X-coordinate in mm"""

    y: builtins.float = ...
    """Y-coordinate in mm"""

    def __init__(self,
        *,
        x : typing.Optional[builtins.float] = ...,
        y : typing.Optional[builtins.float] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y"]) -> None: ...
global___Vector2f = Vector2f

class SSL_FieldLineSegment(google.protobuf.message.Message):
    """Represents a field marking as a line segment represented by a start point p1,
    and end point p2, and a line thickness. The start and end points are along
    the center of the line, so the thickness of the line extends by thickness / 2
    on either side of the line.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    P1_FIELD_NUMBER: builtins.int
    P2_FIELD_NUMBER: builtins.int
    THICKNESS_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Name of this field marking."""

    @property
    def p1(self) -> global___Vector2f:
        """Start point of the line segment."""
        pass
    @property
    def p2(self) -> global___Vector2f:
        """End point of the line segment."""
        pass
    thickness: builtins.float = ...
    """Thickness of the line segment."""

    type: global___SSL_FieldShapeType.ValueType = ...
    """The type of this shape"""

    def __init__(self,
        *,
        name : typing.Optional[typing.Text] = ...,
        p1 : typing.Optional[global___Vector2f] = ...,
        p2 : typing.Optional[global___Vector2f] = ...,
        thickness : typing.Optional[builtins.float] = ...,
        type : typing.Optional[global___SSL_FieldShapeType.ValueType] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["name",b"name","p1",b"p1","p2",b"p2","thickness",b"thickness","type",b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","p1",b"p1","p2",b"p2","thickness",b"thickness","type",b"type"]) -> None: ...
global___SSL_FieldLineSegment = SSL_FieldLineSegment

class SSL_FieldCircularArc(google.protobuf.message.Message):
    """Represents a field marking as a circular arc segment represented by center point, a
    start angle, an end angle, and an arc thickness.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    CENTER_FIELD_NUMBER: builtins.int
    RADIUS_FIELD_NUMBER: builtins.int
    A1_FIELD_NUMBER: builtins.int
    A2_FIELD_NUMBER: builtins.int
    THICKNESS_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Name of this field marking."""

    @property
    def center(self) -> global___Vector2f:
        """Center point of the circular arc."""
        pass
    radius: builtins.float = ...
    """Radius of the arc."""

    a1: builtins.float = ...
    """Start angle in counter-clockwise order."""

    a2: builtins.float = ...
    """End angle in counter-clockwise order."""

    thickness: builtins.float = ...
    """Thickness of the arc."""

    type: global___SSL_FieldShapeType.ValueType = ...
    """The type of this shape"""

    def __init__(self,
        *,
        name : typing.Optional[typing.Text] = ...,
        center : typing.Optional[global___Vector2f] = ...,
        radius : typing.Optional[builtins.float] = ...,
        a1 : typing.Optional[builtins.float] = ...,
        a2 : typing.Optional[builtins.float] = ...,
        thickness : typing.Optional[builtins.float] = ...,
        type : typing.Optional[global___SSL_FieldShapeType.ValueType] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["a1",b"a1","a2",b"a2","center",b"center","name",b"name","radius",b"radius","thickness",b"thickness","type",b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["a1",b"a1","a2",b"a2","center",b"center","name",b"name","radius",b"radius","thickness",b"thickness","type",b"type"]) -> None: ...
global___SSL_FieldCircularArc = SSL_FieldCircularArc

class SSL_GeometryFieldSize(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FIELD_LENGTH_FIELD_NUMBER: builtins.int
    FIELD_WIDTH_FIELD_NUMBER: builtins.int
    GOAL_WIDTH_FIELD_NUMBER: builtins.int
    GOAL_DEPTH_FIELD_NUMBER: builtins.int
    BOUNDARY_WIDTH_FIELD_NUMBER: builtins.int
    FIELD_LINES_FIELD_NUMBER: builtins.int
    FIELD_ARCS_FIELD_NUMBER: builtins.int
    PENALTY_AREA_DEPTH_FIELD_NUMBER: builtins.int
    PENALTY_AREA_WIDTH_FIELD_NUMBER: builtins.int
    CENTER_CIRCLE_RADIUS_FIELD_NUMBER: builtins.int
    LINE_THICKNESS_FIELD_NUMBER: builtins.int
    GOAL_CENTER_TO_PENALTY_MARK_FIELD_NUMBER: builtins.int
    GOAL_HEIGHT_FIELD_NUMBER: builtins.int
    BALL_RADIUS_FIELD_NUMBER: builtins.int
    MAX_ROBOT_RADIUS_FIELD_NUMBER: builtins.int
    field_length: builtins.int = ...
    """Field length (distance between goal lines) in mm"""

    field_width: builtins.int = ...
    """Field width (distance between touch lines) in mm"""

    goal_width: builtins.int = ...
    """Goal width (distance between inner edges of goal posts) in mm"""

    goal_depth: builtins.int = ...
    """Goal depth (distance from outer goal line edge to inner goal back) in mm"""

    boundary_width: builtins.int = ...
    """Boundary width (distance from touch/goal line centers to boundary walls) in mm"""

    @property
    def field_lines(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SSL_FieldLineSegment]:
        """Generated line segments based on the other parameters"""
        pass
    @property
    def field_arcs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SSL_FieldCircularArc]:
        """Generated circular arcs based on the other parameters"""
        pass
    penalty_area_depth: builtins.int = ...
    """Depth of the penalty/defense area (measured between line centers) in mm"""

    penalty_area_width: builtins.int = ...
    """Width of the penalty/defense area (measured between line centers) in mm"""

    center_circle_radius: builtins.int = ...
    """Radius of the center circle (measured between line centers) in mm"""

    line_thickness: builtins.int = ...
    """Thickness/width of the lines on the field in mm"""

    goal_center_to_penalty_mark: builtins.int = ...
    """Distance between the goal center and the center of the penalty mark in mm"""

    goal_height: builtins.int = ...
    """Goal height in mm"""

    ball_radius: builtins.float = ...
    """Ball radius in mm (note that this is a float type to represent sub-mm precision)"""

    max_robot_radius: builtins.float = ...
    """Max allowed robot radius in mm (note that this is a float type to represent sub-mm precision)"""

    def __init__(self,
        *,
        field_length : typing.Optional[builtins.int] = ...,
        field_width : typing.Optional[builtins.int] = ...,
        goal_width : typing.Optional[builtins.int] = ...,
        goal_depth : typing.Optional[builtins.int] = ...,
        boundary_width : typing.Optional[builtins.int] = ...,
        field_lines : typing.Optional[typing.Iterable[global___SSL_FieldLineSegment]] = ...,
        field_arcs : typing.Optional[typing.Iterable[global___SSL_FieldCircularArc]] = ...,
        penalty_area_depth : typing.Optional[builtins.int] = ...,
        penalty_area_width : typing.Optional[builtins.int] = ...,
        center_circle_radius : typing.Optional[builtins.int] = ...,
        line_thickness : typing.Optional[builtins.int] = ...,
        goal_center_to_penalty_mark : typing.Optional[builtins.int] = ...,
        goal_height : typing.Optional[builtins.int] = ...,
        ball_radius : typing.Optional[builtins.float] = ...,
        max_robot_radius : typing.Optional[builtins.float] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["ball_radius",b"ball_radius","boundary_width",b"boundary_width","center_circle_radius",b"center_circle_radius","field_length",b"field_length","field_width",b"field_width","goal_center_to_penalty_mark",b"goal_center_to_penalty_mark","goal_depth",b"goal_depth","goal_height",b"goal_height","goal_width",b"goal_width","line_thickness",b"line_thickness","max_robot_radius",b"max_robot_radius","penalty_area_depth",b"penalty_area_depth","penalty_area_width",b"penalty_area_width"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["ball_radius",b"ball_radius","boundary_width",b"boundary_width","center_circle_radius",b"center_circle_radius","field_arcs",b"field_arcs","field_length",b"field_length","field_lines",b"field_lines","field_width",b"field_width","goal_center_to_penalty_mark",b"goal_center_to_penalty_mark","goal_depth",b"goal_depth","goal_height",b"goal_height","goal_width",b"goal_width","line_thickness",b"line_thickness","max_robot_radius",b"max_robot_radius","penalty_area_depth",b"penalty_area_depth","penalty_area_width",b"penalty_area_width"]) -> None: ...
global___SSL_GeometryFieldSize = SSL_GeometryFieldSize

class SSL_GeometryCameraCalibration(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CAMERA_ID_FIELD_NUMBER: builtins.int
    FOCAL_LENGTH_FIELD_NUMBER: builtins.int
    PRINCIPAL_POINT_X_FIELD_NUMBER: builtins.int
    PRINCIPAL_POINT_Y_FIELD_NUMBER: builtins.int
    DISTORTION_FIELD_NUMBER: builtins.int
    Q0_FIELD_NUMBER: builtins.int
    Q1_FIELD_NUMBER: builtins.int
    Q2_FIELD_NUMBER: builtins.int
    Q3_FIELD_NUMBER: builtins.int
    TX_FIELD_NUMBER: builtins.int
    TY_FIELD_NUMBER: builtins.int
    TZ_FIELD_NUMBER: builtins.int
    DERIVED_CAMERA_WORLD_TX_FIELD_NUMBER: builtins.int
    DERIVED_CAMERA_WORLD_TY_FIELD_NUMBER: builtins.int
    DERIVED_CAMERA_WORLD_TZ_FIELD_NUMBER: builtins.int
    PIXEL_IMAGE_WIDTH_FIELD_NUMBER: builtins.int
    PIXEL_IMAGE_HEIGHT_FIELD_NUMBER: builtins.int
    camera_id: builtins.int = ...
    focal_length: builtins.float = ...
    principal_point_x: builtins.float = ...
    principal_point_y: builtins.float = ...
    distortion: builtins.float = ...
    q0: builtins.float = ...
    q1: builtins.float = ...
    q2: builtins.float = ...
    q3: builtins.float = ...
    tx: builtins.float = ...
    ty: builtins.float = ...
    tz: builtins.float = ...
    derived_camera_world_tx: builtins.float = ...
    derived_camera_world_ty: builtins.float = ...
    derived_camera_world_tz: builtins.float = ...
    pixel_image_width: builtins.int = ...
    pixel_image_height: builtins.int = ...
    def __init__(self,
        *,
        camera_id : typing.Optional[builtins.int] = ...,
        focal_length : typing.Optional[builtins.float] = ...,
        principal_point_x : typing.Optional[builtins.float] = ...,
        principal_point_y : typing.Optional[builtins.float] = ...,
        distortion : typing.Optional[builtins.float] = ...,
        q0 : typing.Optional[builtins.float] = ...,
        q1 : typing.Optional[builtins.float] = ...,
        q2 : typing.Optional[builtins.float] = ...,
        q3 : typing.Optional[builtins.float] = ...,
        tx : typing.Optional[builtins.float] = ...,
        ty : typing.Optional[builtins.float] = ...,
        tz : typing.Optional[builtins.float] = ...,
        derived_camera_world_tx : typing.Optional[builtins.float] = ...,
        derived_camera_world_ty : typing.Optional[builtins.float] = ...,
        derived_camera_world_tz : typing.Optional[builtins.float] = ...,
        pixel_image_width : typing.Optional[builtins.int] = ...,
        pixel_image_height : typing.Optional[builtins.int] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["camera_id",b"camera_id","derived_camera_world_tx",b"derived_camera_world_tx","derived_camera_world_ty",b"derived_camera_world_ty","derived_camera_world_tz",b"derived_camera_world_tz","distortion",b"distortion","focal_length",b"focal_length","pixel_image_height",b"pixel_image_height","pixel_image_width",b"pixel_image_width","principal_point_x",b"principal_point_x","principal_point_y",b"principal_point_y","q0",b"q0","q1",b"q1","q2",b"q2","q3",b"q3","tx",b"tx","ty",b"ty","tz",b"tz"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["camera_id",b"camera_id","derived_camera_world_tx",b"derived_camera_world_tx","derived_camera_world_ty",b"derived_camera_world_ty","derived_camera_world_tz",b"derived_camera_world_tz","distortion",b"distortion","focal_length",b"focal_length","pixel_image_height",b"pixel_image_height","pixel_image_width",b"pixel_image_width","principal_point_x",b"principal_point_x","principal_point_y",b"principal_point_y","q0",b"q0","q1",b"q1","q2",b"q2","q3",b"q3","tx",b"tx","ty",b"ty","tz",b"tz"]) -> None: ...
global___SSL_GeometryCameraCalibration = SSL_GeometryCameraCalibration

class SSL_BallModelStraightTwoPhase(google.protobuf.message.Message):
    """Two-Phase model for straight-kicked balls.
    There are two phases with different accelerations during the ball kicks:
    1. Sliding
    2. Rolling
    The full model is described in the TDP of ER-Force from 2016, which can be found here:
    https://ssl.robocup.org/wp-content/uploads/2019/01/2016_ETDP_ER-Force.pdf
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ACC_SLIDE_FIELD_NUMBER: builtins.int
    ACC_ROLL_FIELD_NUMBER: builtins.int
    K_SWITCH_FIELD_NUMBER: builtins.int
    acc_slide: builtins.float = ...
    """Ball sliding acceleration [m/s^2] (should be negative)"""

    acc_roll: builtins.float = ...
    """Ball rolling acceleration [m/s^2] (should be negative)"""

    k_switch: builtins.float = ...
    """Fraction of the initial velocity where the ball starts to roll"""

    def __init__(self,
        *,
        acc_slide : typing.Optional[builtins.float] = ...,
        acc_roll : typing.Optional[builtins.float] = ...,
        k_switch : typing.Optional[builtins.float] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["acc_roll",b"acc_roll","acc_slide",b"acc_slide","k_switch",b"k_switch"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["acc_roll",b"acc_roll","acc_slide",b"acc_slide","k_switch",b"k_switch"]) -> None: ...
global___SSL_BallModelStraightTwoPhase = SSL_BallModelStraightTwoPhase

class SSL_BallModelChipFixedLoss(google.protobuf.message.Message):
    """Fixed-Loss model for chipped balls.
    Uses fixed damping factors for xy and z direction per hop.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DAMPING_XY_FIRST_HOP_FIELD_NUMBER: builtins.int
    DAMPING_XY_OTHER_HOPS_FIELD_NUMBER: builtins.int
    DAMPING_Z_FIELD_NUMBER: builtins.int
    damping_xy_first_hop: builtins.float = ...
    """Chip kick velocity damping factor in XY direction for the first hop"""

    damping_xy_other_hops: builtins.float = ...
    """Chip kick velocity damping factor in XY direction for all following hops"""

    damping_z: builtins.float = ...
    """Chip kick velocity damping factor in Z direction for all hops"""

    def __init__(self,
        *,
        damping_xy_first_hop : typing.Optional[builtins.float] = ...,
        damping_xy_other_hops : typing.Optional[builtins.float] = ...,
        damping_z : typing.Optional[builtins.float] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["damping_xy_first_hop",b"damping_xy_first_hop","damping_xy_other_hops",b"damping_xy_other_hops","damping_z",b"damping_z"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["damping_xy_first_hop",b"damping_xy_first_hop","damping_xy_other_hops",b"damping_xy_other_hops","damping_z",b"damping_z"]) -> None: ...
global___SSL_BallModelChipFixedLoss = SSL_BallModelChipFixedLoss

class SSL_GeometryModels(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    STRAIGHT_TWO_PHASE_FIELD_NUMBER: builtins.int
    CHIP_FIXED_LOSS_FIELD_NUMBER: builtins.int
    @property
    def straight_two_phase(self) -> global___SSL_BallModelStraightTwoPhase: ...
    @property
    def chip_fixed_loss(self) -> global___SSL_BallModelChipFixedLoss: ...
    def __init__(self,
        *,
        straight_two_phase : typing.Optional[global___SSL_BallModelStraightTwoPhase] = ...,
        chip_fixed_loss : typing.Optional[global___SSL_BallModelChipFixedLoss] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["chip_fixed_loss",b"chip_fixed_loss","straight_two_phase",b"straight_two_phase"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["chip_fixed_loss",b"chip_fixed_loss","straight_two_phase",b"straight_two_phase"]) -> None: ...
global___SSL_GeometryModels = SSL_GeometryModels

class SSL_GeometryData(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FIELD_FIELD_NUMBER: builtins.int
    CALIB_FIELD_NUMBER: builtins.int
    MODELS_FIELD_NUMBER: builtins.int
    @property
    def field(self) -> global___SSL_GeometryFieldSize: ...
    @property
    def calib(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SSL_GeometryCameraCalibration]: ...
    @property
    def models(self) -> global___SSL_GeometryModels: ...
    def __init__(self,
        *,
        field : typing.Optional[global___SSL_GeometryFieldSize] = ...,
        calib : typing.Optional[typing.Iterable[global___SSL_GeometryCameraCalibration]] = ...,
        models : typing.Optional[global___SSL_GeometryModels] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["field",b"field","models",b"models"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["calib",b"calib","field",b"field","models",b"models"]) -> None: ...
global___SSL_GeometryData = SSL_GeometryData
